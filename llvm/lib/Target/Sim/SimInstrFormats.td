//===-- SimInstrFormats.td - Sim Instruction Formats -----*- tablegen -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
//  Describe Sim instructions format
//
//  CPU INSTRUCTION FORMATS
//
//  FF FF FF FF
//        ^^ ^^ - r3_imm - third reg or imm
//      ^       - r2     - second reg
//     ^        - r1     - first reg
//  ^^          - opcode - operation code
//
//===----------------------------------------------------------------------===//

// Generic Sim Format
class SimInst<bits<8> op, dag outs, dag ins, string asmstr,
              list<dag> pattern> : Instruction {
  // Inst and Size: for tablegen(... -gen-emitter) and
  // tablegen(... -gen-disassembler) in CMakeLists.txt
  let Namespace = "SIM";
  let DecoderNamespace = "SIM";
  let Size = 4;

  field bits<32> Inst;

  bits<8> Opcode = op;
  bits<4>  r1 = 0;
  bits<4>  r2 = 0;
  bits<16> r3_imm = 0;

  let Inst{31-24} = Opcode;
  let Inst{23-20} = r1;
  let Inst{19-16} = r2;
  let Inst{15-0}  = r3_imm;

  let OutOperandList = outs;
  let InOperandList  = ins;
  let AsmString   = asmstr;
  let Pattern     = pattern;

  let Itinerary = NoItinerary;
}

class ALU_ri<bits<8> opcode, string asmstr,
             list<dag> pattern> : SimInst<opcode, (outs GPR:$r1), (ins GPR:$r2, GPR:$imm16),
                                          asmstr # " $r1 $r2 $imm16", pattern> {
  let mayLoad = 0;
  let mayStore = 0;
}


class SimInstRegister<bits<8> opcode, dag outs,
                      dag ins, string asmstr, list<dag> pattern> : SimInst<opcode, outs, ins, asmstr, pattern> {
  bits<4> r3;

  let Inst{15-12} = r3;
  let Inst{11-0}  = 0;
}

class ALU_rr<bits<8> opcode, string asmstr,
             list<dag> pattern> : SimInstRegister<opcode, (outs GPR:$r1), (ins GPR:$r2, GPR:$r3),
                                                  asmstr # " $r1 $r2 $r3", pattern> {
  let mayLoad = 0;
  let mayStore = 0;
}

// Pseudo instructions format
class SimPseudoInst<dag outs, dag ins, string asmstr, list<dag> pattern>
   : SimInst<0, outs, ins, asmstr, pattern> {
  let isPseudo = 1;
  let isCodeGenOnly = 1;
}
